datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum UserRoles {
  user
  admin
}

model User {
  id            String          @id @default(auto()) @map("_id") @db.ObjectId
  firstname     String
  lastname      String
  email         String          @unique
  emailVerified DateTime?
  password      String
  image         String?
  role          UserRoles           @default(user)
  accounts      Account[]
  sessions      Session[]
  // Optional for WebAuthn support
  Authenticator Authenticator[]
  workspaces Workspace[]
  files File[]
  comments Comment[]
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
}

model Account {
  id                String   @id @default(auto()) @map("_id") @db.ObjectId
  userId            String   @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?  @db.String
  access_token      String?  @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?  @db.String
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
}

// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @id @map("_id")
  userId               String  @db.ObjectId
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, credentialID])
}

enum WorkspaceRoles {
  viewer
  editor
  reviewer
  manager
  owner
}

model Workspace {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  name String @default("Untitled")
  description String?
  picture String?
  managerId String @db.ObjectId

  manager User @relation(fields: [managerId], references: [id], onDelete: Cascade)
  files File[]
  members WorkspaceMembers[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model WorkspaceMembers {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  userId String @db.ObjectId
  workspaceId String @db.ObjectId
  role WorkspaceRoles @default(viewer)

  workspace Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum MimeType {
  folder
  docs
  spreadsheet
  pdf
  txt
  image
  video
  audio
  archive
}

model File {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  fileUrl     String?
  mimeType MimeType
  parentId String? @db.ObjectId
  workspaceId String @db.ObjectId
  uploadedBy String @db.ObjectId

  workspace Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  uploader User @relation(fields: [uploadedBy], references: [id])

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Comment {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  userId String @db.ObjectId
  content String
  isEdited Boolean @default(false)
  parentId String? @db.ObjectId
  
  user User @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}